#!/usr/bin/env bash

# A best practices Bash script template with many useful functions. This file
# combines the source.sh & script.sh files into a single script. If you want
# your script to be entirely self-contained then this should be what you want!

# A better class of script...
set -o errexit          # Exit on most errors (see the manual)
set -o errtrace         # Make sure any error trap is inherited
set -o nounset          # Disallow expansion of unset variables
set -o pipefail         # Use last non-zero exit code in a pipeline
#set -o xtrace          # Trace the execution of the script (debug)

# DESC: Handler for unexpected errors
# ARGS: $1 (optional): Exit code (defaults to 1)
# OUTS: None
function script_trap_err() {
    local exit_code=1

    # Disable the error trap handler to prevent potential recursion
    trap - ERR

    # Consider any further errors non-fatal to ensure we run to completion
    set +o errexit
    set +o pipefail

    # Validate any provided exit code
    if [[ ${1-} =~ ^[0-9]+$ ]]; then
        exit_code="$1"
    fi

    # Exit with failure status
    exit "$exit_code"
}


# DESC: Handler for exiting the script
# ARGS: None
# OUTS: None
function script_trap_exit() {
    cd "$orig_cwd"

    # Restore terminal colours
    printf '%b' "$ta_none"

    # clean up downloaded files
    rm -f vs_installer.exe || true
}


# DESC: Exit script with the given message
# ARGS: $1 (required): Message to print on exit
#       $2 (optional): Exit code (defaults to 0)
# OUTS: None
function script_exit() {
    if [[ $# -eq 1 ]]; then
        printf '%s\n' "$1"
        exit 0
    fi

    if [[ ${2-} =~ ^[0-9]+$ ]]; then
        printf '%b\n' "$1"
        # If we've been provided a non-zero exit code run the error trap
        if [[ $2 -ne 0 ]]; then
            script_trap_err "$2"
        else
            exit 0
        fi
    fi

    script_exit 'Missing required argument to script_exit()!' 2
}


# DESC: Generic script initialisation
# ARGS: $@ (optional): Arguments provided to the script
# OUTS: $orig_cwd: The current working directory when the script was run
#       $script_path: The full path to the script
#       $script_dir: The directory path of the script
#       $script_name: The file name of the script
#       $script_params: The original parameters provided to the script
#       $ta_none: The ANSI control code to reset all text attributes
# NOTE: $script_path only contains the path that was used to call the script
#       and will not resolve any symlinks which may be present in the path.
#       You can use a tool like realpath to obtain the "true" path. The same
#       caveat applies to both the $script_dir and $script_name variables.
function script_init() {
    # Useful paths
    readonly orig_cwd="$PWD"
    readonly script_path="${BASH_SOURCE[0]}"
    readonly script_dir="$(dirname "$script_path")"
    readonly script_name="$(basename "$script_path")"
    readonly script_params="$*"

    readonly noedit_base="https://github.com/OutpostUniverse/"
    readonly edit_base="git@github.com:OutpostUniverse/"

    readonly base_repo="OP2-Workspace.git"
    readonly levels="LevelTemplate-Blank-Comments.git LevelTemplate-Hooville.git LevelTemplate-Blank.git"
    readonly api="Outpost2DLL.git OP2Helper.git HFL-IUnit.git HFL.git"

    readonly game_zip="Outpost2-1.3.0.7-OPU.zip"
    readonly game_url="http://outpost2.net/files/op2/game/1.3.0.7/$game_zip"

    readonly vs_buildtools_url="https://aka.ms/vs/15/release/vs_buildtools.exe"
    readonly vs_community_url="https://aka.ms/vs/15/release/vs_community.exe"

    # Important to always set as we use it in the exit handler
    readonly ta_none="$(tput sgr0 2> /dev/null || true)"
}


# DESC: Initialise colour variables
# ARGS: None
# OUTS: Read-only variables with ANSI control codes
# NOTE: If --no-colour was set the variables will be empty
function colour_init() {
    if [[ -z ${no_colour-} ]]; then
        # Text attributes
        readonly ta_bold="$(tput bold 2> /dev/null || true)"
        printf '%b' "$ta_none"
        readonly ta_uscore="$(tput smul 2> /dev/null || true)"
        printf '%b' "$ta_none"
        readonly ta_blink="$(tput blink 2> /dev/null || true)"
        printf '%b' "$ta_none"
        readonly ta_reverse="$(tput rev 2> /dev/null || true)"
        printf '%b' "$ta_none"
        readonly ta_conceal="$(tput invis 2> /dev/null || true)"
        printf '%b' "$ta_none"

        # Foreground codes
        readonly fg_black="$(tput setaf 0 2> /dev/null || true)"
        printf '%b' "$ta_none"
        readonly fg_blue="$(tput setaf 4 2> /dev/null || true)"
        printf '%b' "$ta_none"
        readonly fg_cyan="$(tput setaf 6 2> /dev/null || true)"
        printf '%b' "$ta_none"
        readonly fg_green="$(tput setaf 2 2> /dev/null || true)"
        printf '%b' "$ta_none"
        readonly fg_magenta="$(tput setaf 5 2> /dev/null || true)"
        printf '%b' "$ta_none"
        readonly fg_red="$(tput setaf 1 2> /dev/null || true)"
        printf '%b' "$ta_none"
        readonly fg_white="$(tput setaf 7 2> /dev/null || true)"
        printf '%b' "$ta_none"
        readonly fg_yellow="$(tput setaf 3 2> /dev/null || true)"
        printf '%b' "$ta_none"

        # Background codes
        readonly bg_black="$(tput setab 0 2> /dev/null || true)"
        printf '%b' "$ta_none"
        readonly bg_blue="$(tput setab 4 2> /dev/null || true)"
        printf '%b' "$ta_none"
        readonly bg_cyan="$(tput setab 6 2> /dev/null || true)"
        printf '%b' "$ta_none"
        readonly bg_green="$(tput setab 2 2> /dev/null || true)"
        printf '%b' "$ta_none"
        readonly bg_magenta="$(tput setab 5 2> /dev/null || true)"
        printf '%b' "$ta_none"
        readonly bg_red="$(tput setab 1 2> /dev/null || true)"
        printf '%b' "$ta_none"
        readonly bg_white="$(tput setab 7 2> /dev/null || true)"
        printf '%b' "$ta_none"
        readonly bg_yellow="$(tput setab 3 2> /dev/null || true)"
        printf '%b' "$ta_none"
    else
        # Text attributes
        readonly ta_bold=''
        readonly ta_uscore=''
        readonly ta_blink=''
        readonly ta_reverse=''
        readonly ta_conceal=''

        # Foreground codes
        readonly fg_black=''
        readonly fg_blue=''
        readonly fg_cyan=''
        readonly fg_green=''
        readonly fg_magenta=''
        readonly fg_red=''
        readonly fg_white=''
        readonly fg_yellow=''

        # Background codes
        readonly bg_black=''
        readonly bg_blue=''
        readonly bg_cyan=''
        readonly bg_green=''
        readonly bg_magenta=''
        readonly bg_red=''
        readonly bg_white=''
        readonly bg_yellow=''
    fi
}


# DESC: Pretty print the provided string
# ARGS: $1 (required): Message to print (defaults to a green foreground)
#       $2 (optional): Colour to print the message with. This can be an ANSI
#                      escape code or one of the prepopulated colour variables.
#       $3 (optional): Set to any value to not append a new line to the message
# OUTS: None
function pretty_print() {
    if [[ $# -lt 1 ]]; then
        script_exit 'Missing required argument to pretty_print()!' 2
    fi

    if [[ -z ${no_colour-} ]]; then
        if [[ -n ${2-} ]]; then
            printf '%b' "$2"
        else
            printf '%b' "$fg_green"
        fi
    fi

    # Print message & reset text attributes
    if [[ -n ${3-} ]]; then
        printf '%s%b' "$1" "$ta_none"
    else
        printf '%s%b\n' "$1" "$ta_none"
    fi
}


# DESC: Usage help
# ARGS: None
# OUTS: None
function script_usage() {
    cat << EOF
Usage:
     -h|--help                  Displays this help
    -nc|--no-colour             Disables colour output

     -s|--sdk                   Installs OP2 SDK
    -ns|--no-sdk                Skips installing OP2 SDK
     -t|--tools                 Prompts for Visual Studio or Build Tools for VS
    -nt|--no-tools              Skips prompts for Visual Studio or Build Tools for VS

     -i|--install-dir           Manual sets SDK install directory (unused if -ns is set)

     -b|--build-tools           Use standalone build tools (only for Windows, used if -nt is set)
    -vs|--visual-studio         Use VS 2017 Community Edition (only for Windows, used if -nt is set)
EOF
}


# DESC: Parameter parser
# ARGS: $@ (optional): Arguments provided to the script
# OUTS: Variables indicating command-line parameters and options
function parse_params() {
    install_dir=
    sdk="-1"
    tools="-1"
    build_tools="-1"

    local param
    while [[ $# -gt 0 ]]; do
        param="$1"
        shift
        case $param in
            -h|--help)
                script_usage
                exit 0
                ;;
            -nc|--no-colour)
                no_colour=true
                ;;

            -s|--sdk)
                sdk=true
                ;;
            -ns|--no-sdk)
                sdk=false
                ;;
            -t|--tools)
                tools=true
                ;;
            -nt|--no-tools)
                tools=false
                ;;

            -i|--install-dir)
                install_dir="$1"
                shift
                ;;

            -b|--build-tools)
                build_tools=true
                ;;
            -nb|--no-build-tools)
                build_tools=false
                ;;
            *)
                script_exit "Invalid parameter was provided: $param" 2
                ;;
        esac
    done
}

function ask() {
    # https://gist.github.com/davejamesmiller/1965569
    local prompt default reply

    if [ "${2:-}" = "Y" ]; then
        prompt="Y/n"
        default=Y
    elif [ "${2:-}" = "N" ]; then
        prompt="y/N"
        default=N
    else
        prompt="y/n"
        default=
    fi

    while true; do
        # Ask the question (not using "read -p" as it uses stderr not stdout)
        pretty_print "$1 [$prompt]"
        # Read the answer (use /dev/tty in case stdin is redirected from somewhere else)
        read reply </dev/tty

        # Default?
        if [ -z "$reply" ]; then
            reply=$default
        fi

        # Check if the reply is valid
        case "$reply" in
            Y*|y*) return 0 ;;
            N*|n*) return 1 ;;
        esac
    done
}


function install_sdk() {
    local editable=false

    if [[ -z "$install_dir" ]]; then
        pretty_print "Base path to install Outpost 2 SDK to: "
        read -e install_dir
    fi

    install_dir=$(readlink -f $install_dir)

    pretty_print "Using $install_dir..."

    pretty_print "Checking for edit permissions..."

    trap - ERR
    trap - EXIT
    set +e

    git ls-remote $edit_base$base_repo 2>/dev/null 1>&2
    exit_code="$?"

    set -o errexit
    trap script_trap_err ERR
    trap script_trap_exit EXIT

    if [[ ! "$exit_code" -eq 128 ]]; then
        pretty_print "Downloading OP2 repos with edit permissions."
        editable=true

        base="$edit_base"
    elif [[ "$exit_code" -eq 128 ]]; then
        base="$noedit_base"
    else
        script_exit "Git exited unexpectly" 1
    fi

    # clone base repo
    pretty_print "Cloning workspace repo..."
    git clone $base$base_repo "$install_dir"
    cd "$install_dir"

    # clone API repos
    mkdir API
    cd API
    for repo_name in $api; do
        pretty_print "Cloning $repo_name..."
        git clone $base$repo_name
    done;
    cd ..

    # clone Level repos
    mkdir Levels
    cd Levels
    for repo_name in $levels; do
        pretty_print "Cloning $repo_name..."
        git clone $base$repo_name
    done;
    cd ..

    # install game
    pretty_print "Installing OP2 Game..."
    mkdir Game
    cd Game
    curl $game_url -o $game_zip
    unzip -q $game_zip
    rm $game_zip
    cd ..
}

function install_compiler() {
    if [ -d "/c" ] || [ -d "/mnt/c" ]; then
        if [[ "$build_tools" = "-1" ]]; then
            if ask "Do you want to use Visual Studio?" Y; then
                build_tools=false
            else
                build_tools=true
            fi
        fi

        if [[ "$build_tools" = true ]]; then
            pretty_print "Installing Build Tools for Visual Studio..."
            curl -s --http1.1 -L $vs_buildtools_url -o vs_installer.exe
            ./vs_installer.exe --passive --wait --norestart --nocache --add Microsoft.VisualStudio.Product.BuildTools --add Microsoft.VisualStudio.Workload.VCTools --add Microsoft.VisualStudio.Component.VC.Tools.x86.x64 --add Microsoft.VisualStudio.Component.Windows10SDK.17134 --includeRecommended
        else
            pretty_print "Installing Visual Studio 2017 Community Edition..."
            curl -s --http1.1 -L $vs_community_url -o vs_installer.exe
            ./vs_installer.exe --passive --wait --norestart --nocache --add Microsoft.VisualStudio.Workload.CoreEditor --add Microsoft.VisualStudio.Component.VC.CoreBuildTools --add Microsoft.VisualStudio.Component.VC.Tools.x86.x64 --add Microsoft.VisualStudio.Component.Windows10SDK.17134 --add Microsoft.VisualStudio.Component.NuGet --add Microsoft.Component.MSBuild --add Microsoft.VisualStudio.Component.VC.Redist.14.Latest --add Microsoft.VisualStudio.Component.VC.CMake.Project --add Microsoft.VisualStudio.Component.VC.ATL --includeRecommended
        fi
    else
        echo "Linux"
    fi
}


# DESC: Main control flow
# ARGS: $@ (optional): Arguments provided to the script
# OUTS: None
function main() {
    trap script_trap_err ERR
    trap script_trap_exit EXIT

    script_init "$@"
    parse_params "$@"
    colour_init

    if [[ "$sdk" = "-1" ]]; then
        if ask "Do you want to install OP2 SDK?" Y; then
            sdk=true
        else
            sdk=false
        fi
    fi

    if [[ "$sdk" = true ]]; then
        install_sdk
    fi

    if [[ "$tools" = "-1" ]]; then
        if ask "Do you want to install Visual Studio or Build Tools for VS?" Y; then
            tools=true
        else
            tools=false
        fi
    fi

    if [[ "$tools" = true ]]; then
        install_compiler
    fi
}


# Make it rain
main "$@"

# vim: syntax=sh cc=80 tw=79 ts=4 sw=4 sts=4 et sr
